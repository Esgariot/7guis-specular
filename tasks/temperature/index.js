// Generated by purs bundle 0.14.5
var PS = {};
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Semigroupoid"] = $PS["Control.Semigroupoid"] || {};
  var exports = $PS["Control.Semigroupoid"];
  var semigroupoidFn = {
      compose: function (f) {
          return function (g) {
              return function (x) {
                  return f(g(x));
              };
          };
      }
  };
  exports["semigroupoidFn"] = semigroupoidFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Category"] = $PS["Control.Category"] || {};
  var exports = $PS["Control.Category"];
  var Control_Semigroupoid = $PS["Control.Semigroupoid"];                
  var identity = function (dict) {
      return dict.identity;
  };
  var categoryFn = {
      identity: function (x) {
          return x;
      },
      Semigroupoid0: function () {
          return Control_Semigroupoid.semigroupoidFn;
      }
  };
  exports["identity"] = identity;
  exports["categoryFn"] = categoryFn;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Function"] = $PS["Data.Function"] || {};
  var exports = $PS["Data.Function"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["flip"] = flip;
  exports["const"] = $$const;
})(PS);
(function(exports) {
  "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Unit"] = $PS["Data.Unit"] || {};
  var exports = $PS["Data.Unit"];
  var $foreign = $PS["Data.Unit"];
  exports["unit"] = $foreign.unit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Functor"] = $PS["Data.Functor"] || {};
  var exports = $PS["Data.Functor"];
  var Data_Function = $PS["Data.Function"];
  var Data_Unit = $PS["Data.Unit"];                  
  var map = function (dict) {
      return dict.map;
  };
  var $$void = function (dictFunctor) {
      return map(dictFunctor)(Data_Function["const"](Data_Unit.unit));
  };
  exports["map"] = map;
  exports["void"] = $$void;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Apply"] = $PS["Control.Apply"] || {};
  var exports = $PS["Control.Apply"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];
  var Data_Functor = $PS["Data.Functor"];
  var apply = function (dict) {
      return dict.apply;
  };
  var applySecond = function (dictApply) {
      return function (a) {
          return function (b) {
              return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(Data_Function["const"](Control_Category.identity(Control_Category.categoryFn)))(a))(b);
          };
      };
  };
  var lift2 = function (dictApply) {
      return function (f) {
          return function (a) {
              return function (b) {
                  return apply(dictApply)(Data_Functor.map(dictApply.Functor0())(f)(a))(b);
              };
          };
      };
  };
  exports["apply"] = apply;
  exports["applySecond"] = applySecond;
  exports["lift2"] = lift2;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Applicative"] = $PS["Control.Applicative"] || {};
  var exports = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];          
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative.Apply0())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["pure"] = pure;
  exports["liftA1"] = liftA1;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Bind"] = $PS["Control.Bind"] || {};
  var exports = $PS["Control.Bind"];
  var Control_Category = $PS["Control.Category"];
  var Data_Function = $PS["Data.Function"];          
  var discard = function (dict) {
      return dict.discard;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var bindFlipped = function (dictBind) {
      return Data_Function.flip(bind(dictBind));
  };
  var discardUnit = {
      discard: function (dictBind) {
          return bind(dictBind);
      }
  };
  var join = function (dictBind) {
      return function (m) {
          return bind(dictBind)(m)(Control_Category.identity(Control_Category.categoryFn));
      };
  };
  exports["bind"] = bind;
  exports["bindFlipped"] = bindFlipped;
  exports["discard"] = discard;
  exports["join"] = join;
  exports["discardUnit"] = discardUnit;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad"] = $PS["Control.Monad"] || {};
  var exports = $PS["Control.Monad"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad.Bind1())(f)(function (f$prime) {
                  return Control_Bind.bind(dictMonad.Bind1())(a)(function (a$prime) {
                      return Control_Applicative.pure(dictMonad.Applicative0())(f$prime(a$prime));
                  });
              });
          };
      };
  };
  exports["ap"] = ap;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Cleanup"] = $PS["Control.Monad.Cleanup"] || {};
  var exports = $PS["Control.Monad.Cleanup"];
  var onCleanup = function (dict) {
      return dict.onCleanup;
  };
  exports["onCleanup"] = onCleanup;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Reader.Class"] = $PS["Control.Monad.Reader.Class"] || {};
  var exports = $PS["Control.Monad.Reader.Class"];
  var ask = function (dict) {
      return dict.ask;
  };
  exports["ask"] = ask;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.Replace"] = $PS["Control.Monad.Replace"] || {};
  var exports = $PS["Control.Monad.Replace"];
  var Slot = (function () {
      function Slot(value0, value1, value2) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
      };
      Slot.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return new Slot(value0, value1, value2);
              };
          };
      };
      return Slot;
  })();
  var replaceSlot = function (v) {
      return v.value0;
  };
  var newSlot = function (dict) {
      return dict.newSlot;
  };
  var destroySlot = function (v) {
      return v.value1;
  };
  exports["newSlot"] = newSlot;
  exports["Slot"] = Slot;
  exports["replaceSlot"] = replaceSlot;
  exports["destroySlot"] = destroySlot;
})(PS);
(function(exports) {
  "use strict";

  exports.map_ = function (f) {
    return function (a) {
      return function () {
        return f(a());
      };
    };
  };

  exports.pure_ = function (a) {
    return function () {
      return a;
    };
  };

  exports.bind_ = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };
})(PS["Control.Monad.ST.Internal"] = PS["Control.Monad.ST.Internal"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Control.Monad.ST.Internal"] = $PS["Control.Monad.ST.Internal"] || {};
  var exports = $PS["Control.Monad.ST.Internal"];
  var $foreign = $PS["Control.Monad.ST.Internal"];
  var Control_Monad = $PS["Control.Monad"];
  var functorST = {
      map: $foreign.map_
  };
  var monadST = {
      Applicative0: function () {
          return applicativeST;
      },
      Bind1: function () {
          return bindST;
      }
  };
  var bindST = {
      bind: $foreign.bind_,
      Apply0: function () {
          return applyST;
      }
  };
  var applyST = {
      apply: Control_Monad.ap(monadST),
      Functor0: function () {
          return functorST;
      }
  };
  var applicativeST = {
      pure: $foreign.pure_,
      Apply0: function () {
          return applyST;
      }
  };
  exports["bindST"] = bindST;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Boolean"] = $PS["Data.Boolean"] || {};
  var exports = $PS["Data.Boolean"];
  var otherwise = true;
  exports["otherwise"] = otherwise;
})(PS);
(function(exports) {
  "use strict";

  var refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };                            
  exports.eqIntImpl = refEq;
})(PS["Data.Eq"] = PS["Data.Eq"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Eq"] = $PS["Data.Eq"] || {};
  var exports = $PS["Data.Eq"];
  var $foreign = $PS["Data.Eq"];
  var eqInt = {
      eq: $foreign.eqIntImpl
  };
  exports["eqInt"] = eqInt;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Maybe"] = $PS["Data.Maybe"] || {};
  var exports = $PS["Data.Maybe"];                 
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
})(PS);
(function(exports) {
  "use strict";

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Semigroup"] = $PS["Data.Semigroup"] || {};
  var exports = $PS["Data.Semigroup"];
  var $foreign = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var semigroupUnit = {
      append: function (v) {
          return function (v1) {
              return Data_Unit.unit;
          };
      }
  };
  var semigroupArray = {
      append: $foreign.concatArray
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["append"] = append;
  exports["semigroupUnit"] = semigroupUnit;
  exports["semigroupArray"] = semigroupArray;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Monoid"] = $PS["Data.Monoid"] || {};
  var exports = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];                  
  var monoidUnit = {
      mempty: Data_Unit.unit,
      Semigroup0: function () {
          return Data_Semigroup.semigroupUnit;
      }
  };
  var monoidArray = {
      mempty: [  ],
      Semigroup0: function () {
          return Data_Semigroup.semigroupArray;
      }
  };
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["mempty"] = mempty;
  exports["monoidUnit"] = monoidUnit;
  exports["monoidArray"] = monoidArray;
})(PS);
(function(exports) {
  "use strict";

  var unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x === y ? eq : gt;
          };
        };
      };
    };
  };                                         
  exports.ordIntImpl = unsafeCompareImpl;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ordering"] = $PS["Data.Ordering"] || {};
  var exports = $PS["Data.Ordering"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Ord"] = $PS["Data.Ord"] || {};
  var exports = $PS["Data.Ord"];
  var $foreign = $PS["Data.Ord"];
  var Data_Eq = $PS["Data.Eq"];
  var Data_Ordering = $PS["Data.Ordering"];
  var ordInt = {
      compare: $foreign.ordIntImpl(Data_Ordering.LT.value)(Data_Ordering.EQ.value)(Data_Ordering.GT.value),
      Eq0: function () {
          return Data_Eq.eqInt;
      }
  };
  var compare = function (dict) {
      return dict.compare;
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var v = compare(dictOrd)(x)(y);
              if (v instanceof Data_Ordering.LT) {
                  return y;
              };
              if (v instanceof Data_Ordering.EQ) {
                  return x;
              };
              if (v instanceof Data_Ordering.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord (line 176, column 3 - line 179, column 12): " + [ v.constructor.name ]);
          };
      };
  };
  exports["max"] = max;
  exports["ordInt"] = ordInt;
})(PS);
(function(exports) {
  "use strict";

  exports.showNumberImpl = function (n) {
    var str = n.toString();
    return isNaN(str + ".0") ? str : str + ".0";
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Show"] = $PS["Data.Show"] || {};
  var exports = $PS["Data.Show"];
  var $foreign = $PS["Data.Show"];
  var showNumber = {
      show: $foreign.showNumberImpl
  };
  exports["showNumber"] = showNumber;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Data.Tuple"] = $PS["Data.Tuple"] || {};
  var exports = $PS["Data.Tuple"];                 
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
})(PS);
(function(exports) {
  "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Effect"] = PS["Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect"] = $PS["Effect"] || {};
  var exports = $PS["Effect"];
  var $foreign = $PS["Effect"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Monad = $PS["Control.Monad"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];                
  var monadEffect = {
      Applicative0: function () {
          return applicativeEffect;
      },
      Bind1: function () {
          return bindEffect;
      }
  };
  var bindEffect = {
      bind: $foreign.bindE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var applyEffect = {
      apply: Control_Monad.ap(monadEffect),
      Functor0: function () {
          return functorEffect;
      }
  };
  var applicativeEffect = {
      pure: $foreign.pureE,
      Apply0: function () {
          return applyEffect;
      }
  };
  var functorEffect = {
      map: Control_Applicative.liftA1(applicativeEffect)
  };
  var semigroupEffect = function (dictSemigroup) {
      return {
          append: Control_Apply.lift2(applyEffect)(Data_Semigroup.append(dictSemigroup))
      };
  };
  var monoidEffect = function (dictMonoid) {
      return {
          mempty: $foreign.pureE(Data_Monoid.mempty(dictMonoid)),
          Semigroup0: function () {
              return semigroupEffect(dictMonoid.Semigroup0());
          }
      };
  };
  exports["functorEffect"] = functorEffect;
  exports["applyEffect"] = applyEffect;
  exports["applicativeEffect"] = applicativeEffect;
  exports["bindEffect"] = bindEffect;
  exports["monadEffect"] = monadEffect;
  exports["monoidEffect"] = monoidEffect;
  exports["foreachE"] = $foreign.foreachE;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Class"] = $PS["Effect.Class"] || {};
  var exports = $PS["Effect.Class"];
  var Control_Category = $PS["Control.Category"];
  var Effect = $PS["Effect"];                
  var monadEffectEffect = {
      liftEffect: Control_Category.identity(Control_Category.categoryFn),
      Monad0: function () {
          return Effect.monadEffect;
      }
  };
  var liftEffect = function (dict) {
      return dict.liftEffect;
  };
  exports["liftEffect"] = liftEffect;
  exports["monadEffectEffect"] = monadEffectEffect;
})(PS);
(function(exports) {
  "use strict";

  exports.new = function (val) {
    return function () {
      return { value: val };
    };
  };

  exports.read = function (ref) {
    return function () {
      return ref.value;
    };
  };

  exports.modifyImpl = function (f) {
    return function (ref) {
      return function () {
        var t = f(ref.value);
        ref.value = t.state;
        return t.value;
      };
    };
  };

  exports.write = function (val) {
    return function (ref) {
      return function () {
        ref.value = val;
      };
    };
  };
})(PS["Effect.Ref"] = PS["Effect.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Ref"] = $PS["Effect.Ref"] || {};
  var exports = $PS["Effect.Ref"];
  var $foreign = $PS["Effect.Ref"];
  var Data_Functor = $PS["Data.Functor"];
  var Effect = $PS["Effect"];                
  var modify$prime = $foreign.modifyImpl;
  var modify = function (f) {
      return modify$prime(function (s) {
          var s$prime = f(s);
          return {
              state: s$prime,
              value: s$prime
          };
      });
  };
  var modify_ = function (f) {
      return function (s) {
          return Data_Functor["void"](Effect.functorEffect)(modify(f)(s));
      };
  };
  exports["modify_"] = modify_;
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function(exports) {
  "use strict";

  exports.mkEffectFn1 = function mkEffectFn1(fn) {
    return function(x) {
      return fn(x)();
    };
  };

  exports.runEffectFn1 = function runEffectFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };
})(PS["Effect.Uncurried"] = PS["Effect.Uncurried"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Uncurried"] = $PS["Effect.Uncurried"] || {};
  var exports = $PS["Effect.Uncurried"];
  var $foreign = $PS["Effect.Uncurried"];
  exports["mkEffectFn1"] = $foreign.mkEffectFn1;
  exports["runEffectFn1"] = $foreign.runEffectFn1;
})(PS);
(function(exports) {
  "use strict";

  exports.unsafePerformEffect = function (f) {
    return f();
  };
})(PS["Effect.Unsafe"] = PS["Effect.Unsafe"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Effect.Unsafe"] = $PS["Effect.Unsafe"] || {};
  var exports = $PS["Effect.Unsafe"];
  var $foreign = $PS["Effect.Unsafe"];
  exports["unsafePerformEffect"] = $foreign.unsafePerformEffect;
})(PS);
(function(exports) {
  "use strict";      

  exports.runST = function (f) {
    return f();
  };
})(PS["Foreign.Object"] = PS["Foreign.Object"] || {});
(function(exports) {
  "use strict";

  exports["new"] = function () {
    return {};
  };

  exports.poke = function (k) {
    return function (v) {
      return function (m) {
        return function () {
          m[k] = v;
          return m;
        };
      };
    };
  };
})(PS["Foreign.Object.ST"] = PS["Foreign.Object.ST"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign.Object.ST"] = $PS["Foreign.Object.ST"] || {};
  var exports = $PS["Foreign.Object.ST"];
  var $foreign = $PS["Foreign.Object.ST"];
  exports["new"] = $foreign["new"];
  exports["poke"] = $foreign.poke;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Foreign.Object"] = $PS["Foreign.Object"] || {};
  var exports = $PS["Foreign.Object"];
  var $foreign = $PS["Foreign.Object"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_ST_Internal = $PS["Control.Monad.ST.Internal"];
  var Foreign_Object_ST = $PS["Foreign.Object.ST"];
  var singleton = function (k) {
      return function (v) {
          return $foreign.runST(Control_Bind.bindFlipped(Control_Monad_ST_Internal.bindST)(Foreign_Object_ST.poke(k)(v))(Foreign_Object_ST["new"]));
      };
  };
  exports["singleton"] = singleton;
})(PS);
(function(exports) {
  // data Node :: Type

  // createTextNodeImpl :: String -> IOSync Node
  exports.createTextNodeImpl = function (text) {
    return function () {
      return document.createTextNode(text);
    };
  };

  // createDocumentFragmentImpl :: IOSync Node
  exports.createDocumentFragmentImpl = function () {
    return document.createDocumentFragment();
  };

  // createElementImpl :: TagName -> IOSync Node
  exports.createElementImpl = function (tag) {
    return function () {
      return document.createElement(tag);
    };
  };

  // createElementNSImpl :: Namespace -> TagName -> IOSync Node
  exports.createElementNSImpl = function (namespace) {
    return function (tag) {
      return function () {
        return document.createElementNS(namespace, tag);
      };
    };
  };

  // _setAttributes :: EffectFn2 Node (Object String) Unit
  exports._setAttributes = function (node, attrs) {
    for (var k in attrs) {
      if (attrs.hasOwnProperty(k)) {
        node.setAttribute(k, attrs[k]);
      }
    }
  };

  // parentNodeImpl :: (Node -> Maybe Node) -> Maybe Node -> Node -> IOSync (Maybe Node)
  exports.parentNodeImpl = function (Just) {
    return function (Nothing) {
      return function (node) {
        return function () {
          var parent = node.parentNode;
          if (parent !== null) {
            return Just(parent);
          } else {
            return Nothing;
          }
        };
      };
    };
  };

  // insertBeforeImpl :: Node -> Node -> Node -> IOSync Unit
  exports.insertBeforeImpl = function (newNode) {
    return function (nodeAfter) {
      return function (parent) {
        return function () {
          parent.insertBefore(newNode, nodeAfter);
        };
      };
    };
  };

  // appendChildImpl :: Node -> Node -> IOSync Unit
  exports.appendChildImpl = function (newNode) {
    return function (parent) {
      return function () {
        parent.appendChild(newNode);
      };
    };
  };

  // removeAllBetweenImpl :: Node -> Node -> IOSync Unit
  exports.removeAllBetweenImpl = function (from) {
    return function (to) {
      return function () {
        if (!from.parentNode) {
          return;
        }
        var node = from.nextSibling;
        while (node && node !== to) {
          var next = node.nextSibling;
          node.parentNode.removeChild(node);
          node = next;
        }
      };
    };
  };

  // addEventListenerImpl :: EventType -> (Event -> IOSync Unit) -> Node -> IOSync (IOSync Unit)
  exports.addEventListenerImpl = function (eventType) {
    return function (handler) {
      return function (node) {
        return function () {
          var listener = function (event) {
            handler(event)();
          };
          node.addEventListener(eventType, listener);
          return function () {
            node.removeEventListener(eventType, listener);
          };
        };
      };
    };
  };

  // removeNode :: Node -> Effect Unit
  exports.removeNode = function (node) {
    return function () {
      if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
    };
  };
})(PS["Specular.Dom.Browser"] = PS["Specular.Dom.Browser"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Dom.Browser"] = $PS["Specular.Dom.Browser"] || {};
  var exports = $PS["Specular.Dom.Browser"];
  var $foreign = $PS["Specular.Dom.Browser"];
  var Data_Maybe = $PS["Data.Maybe"];
  var setAttributes = function (node) {
      return function (attrs) {
          return function () {
              return $foreign["_setAttributes"](node, attrs);
          };
      };
  };                                                   
  var removeAllBetween = $foreign.removeAllBetweenImpl;
  var parentNode = $foreign.parentNodeImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var insertBefore = $foreign.insertBeforeImpl;
  var createTextNode = $foreign.createTextNodeImpl;
  var createElementNS = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return $foreign.createElementNSImpl(v.value0);
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.createElementImpl;
      };
      throw new Error("Failed pattern match at Specular.Dom.Browser (line 44, column 1 - line 44, column 61): " + [ v.constructor.name ]);
  };
  var createElement = createElementNS(Data_Maybe.Nothing.value);
  var createDocumentFragment = $foreign.createDocumentFragmentImpl;
  var appendChild = $foreign.appendChildImpl;
  var addEventListener = $foreign.addEventListenerImpl;
  exports["addEventListener"] = addEventListener;
  exports["createTextNode"] = createTextNode;
  exports["createDocumentFragment"] = createDocumentFragment;
  exports["createElement"] = createElement;
  exports["setAttributes"] = setAttributes;
  exports["parentNode"] = parentNode;
  exports["insertBefore"] = insertBefore;
  exports["appendChild"] = appendChild;
  exports["removeAllBetween"] = removeAllBetween;
  exports["removeNode"] = $foreign.removeNode;
})(PS);
(function(exports) {
  // data DelayedEffects :: Type

  // emptyDelayed :: Effect DelayedEffects
  exports.emptyDelayed = function () {
    return [];
  };

  // pushDelayed :: DelayedEffects -> Effect Unit -> Effect Unit
  exports.pushDelayed = function (effs) {
    return function (eff) {
      return function () {
        effs.push(eff);
      };
    };
  };

  // unsafeFreezeDelayed :: DelayedEffects -> Effect (Array (Effect Unit))
  exports.unsafeFreezeDelayed = function (x) {
    return function () {
      return x;
    };
  };

  // sequenceEffects :: Array (Effect Unit) -> Effect Unit
  exports.sequenceEffects = function (effects) {
    return function sequenceEffects_eff() {
      for (var i = 0; i < effects.length; i++) {
        effects[i]();
      }
    };
  };
})(PS["Specular.Internal.Effect"] = PS["Specular.Internal.Effect"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Effect"] = $PS["Specular.Internal.Effect"] || {};
  var exports = $PS["Specular.Internal.Effect"];
  var $foreign = $PS["Specular.Internal.Effect"];
  exports["emptyDelayed"] = $foreign.emptyDelayed;
  exports["pushDelayed"] = $foreign.pushDelayed;
  exports["unsafeFreezeDelayed"] = $foreign.unsafeFreezeDelayed;
  exports["sequenceEffects"] = $foreign.sequenceEffects;
})(PS);
(function(exports) {
  // pureImpl  :: forall r a.   a                                -> RIO r a
  exports.pureImpl = function (x) {
    return function RIO_pure_eff(_) {
      return x;
    };
  };

  // mapImpl   :: forall r a b. (a -> b)       -> RIO r a        -> RIO r b
  exports.mapImpl = function (f) {
    return function (io_x) {
      return function RIO_map_eff(env) {
        return f(io_x(env));
      };
    };
  };

  // applyImpl :: forall r a b. RIO r (a -> b) -> RIO r a        -> RIO r b
  exports.applyImpl = function (io_f) {
    return function (io_x) {
      return function RIO_apply_eff(env) {
        var f = io_f(env);
        return f(io_x(env));
      };
    };
  };

  // bindImpl  :: forall r a b. RIO r a        -> (a -> RIO r b) -> RIO r b
  exports.bindImpl = function (io_x) {
    return function (k) {
      return function RIO_bind_eff(env) {
        return k(io_x(env))(env);
      };
    };
  };

  // askImpl   :: forall r. RIO r r
  exports.askImpl = function RIO_ask_eff(env) {
    return env;
  };

  // runRIO :: forall r a. r -> RIO r a -> IOSync a
  exports.runRIO = function (env) {
    return function (io) {
      return function runRIO_eff() {
        return io(env);
      };
    };
  };

  // rio :: forall r a. (r -> IOSync a) -> RIO r a
  exports.rio = function (f) {
    return function RIO_rio_eff(env) {
      return f(env)();
    };
  };
})(PS["Specular.Internal.RIO"] = PS["Specular.Internal.RIO"] || {});
(function(exports) {
  "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Coerce"] = $PS["Unsafe.Coerce"] || {};
  var exports = $PS["Unsafe.Coerce"];
  var $foreign = $PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.RIO"] = $PS["Specular.Internal.RIO"] || {};
  var exports = $PS["Specular.Internal.RIO"];
  var $foreign = $PS["Specular.Internal.RIO"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var RIO = function (x) {
      return x;
  };
  var functorRIO = {
      map: $foreign.mapImpl
  };
  var applyRIO = {
      apply: $foreign.applyImpl,
      Functor0: function () {
          return functorRIO;
      }
  };
  var bindRIO = {
      bind: $foreign.bindImpl,
      Apply0: function () {
          return applyRIO;
      }
  };
  var applicativeRIO = {
      pure: $foreign.pureImpl,
      Apply0: function () {
          return applyRIO;
      }
  };
  var monadRIO = {
      Applicative0: function () {
          return applicativeRIO;
      },
      Bind1: function () {
          return bindRIO;
      }
  };
  var monadAskRIO = {
      ask: $foreign.askImpl,
      Monad0: function () {
          return monadRIO;
      }
  };
  var monadEffectRIO = {
      liftEffect: Unsafe_Coerce.unsafeCoerce,
      Monad0: function () {
          return monadRIO;
      }
  };
  exports["RIO"] = RIO;
  exports["applicativeRIO"] = applicativeRIO;
  exports["bindRIO"] = bindRIO;
  exports["monadRIO"] = monadRIO;
  exports["monadAskRIO"] = monadAskRIO;
  exports["monadEffectRIO"] = monadEffectRIO;
  exports["rio"] = $foreign.rio;
  exports["runRIO"] = $foreign.runRIO;
})(PS);
(function(exports) {
  if (typeof global === "undefined") {
    global = window;
  }

  // global.SPECULAR_PROFILING_ENABLED = true;

  const enabled = !!global.SPECULAR_PROFILING_ENABLED;

  const frameNameToIndex = {};
  const frames = [];
  const events = [];

  global.SpecularProfiling = {
    open: (url) => {
      const w = window.open(url || "http://localhost:1234");
      window.addEventListener("message", (event) => {
        if (event.source === w && event.data.type === "getProfile") {
          console.log("received getProfile");
          w.postMessage(
            {
              type: "loadInitialProfile",
              profile: SpecularProfiling.getProfile(),
            },
            "*"
          );
        }
      });
    },

    getProfile() {
      return {
        shared: {
          frames: frames,
        },
        profiles: [
          {
            type: "evented",
            name: "page",
            unit: "milliseconds",
            startValue: events.length !== 0 ? events[0].at : 0,
            endValue: events.length !== 0 ? events[events.length - 1].at : 0,
            events: events,
          },
        ],
      };
    },

    clear: () => {
      events.length = 0;
    },
  };

  function begin(name) {
    let frameIndex = frameNameToIndex[name];
    if (frameIndex === undefined) {
      frameIndex = frames.length;
      frameNameToIndex[name] = frameIndex;
      frames.push({ name: name });
    }
    events.push({ type: "O", frame: frameIndex, at: performance.now() });
    return frameIndex;
  }

  function end(frame) {
    events.push({ type: "C", frame: frame, at: performance.now() });
  }

  // enabled :: Boolean
  exports.enabled = enabled;

  exports.none = 0;

  // begin :: EffectFn1 String Unit
  exports.begin = enabled ? begin : () => {};

  // end :: EffectFn1 String Unit
  exports.end = enabled ? end : () => {};
})(PS["Specular.Internal.Profiling"] = PS["Specular.Internal.Profiling"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Profiling"] = $PS["Specular.Internal.Profiling"] || {};
  var exports = $PS["Specular.Internal.Profiling"];
  var $foreign = $PS["Specular.Internal.Profiling"];
  exports["enabled"] = $foreign.enabled;
  exports["none"] = $foreign.none;
  exports["begin"] = $foreign.begin;
  exports["end"] = $foreign.end;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Profiling"] = $PS["Specular.Profiling"] || {};
  var exports = $PS["Specular.Profiling"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Specular_Internal_Profiling = $PS["Specular.Internal.Profiling"];                
  var measure = function (dictMonadEffect) {
      if (Specular_Internal_Profiling.enabled) {
          return function (name) {
              return function (action) {
                  return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(function () {
                      return Specular_Internal_Profiling.begin(name);
                  }))(function (mark) {
                      return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(action)(function (result) {
                          return Control_Bind.discard(Control_Bind.discardUnit)((dictMonadEffect.Monad0()).Bind1())(Effect_Class.liftEffect(dictMonadEffect)(function () {
                              return Specular_Internal_Profiling.end(mark);
                          }))(function () {
                              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(result);
                          });
                      });
                  });
              };
          };
      };
      return function (v) {
          return function (action) {
              return action;
          };
      };
  };
  var end = (function () {
      if (Specular_Internal_Profiling.enabled) {
          return Effect_Uncurried.runEffectFn1(Specular_Internal_Profiling.end);
      };
      return function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Data_Unit.unit);
      };
  })();
  var begin = (function () {
      if (Specular_Internal_Profiling.enabled) {
          return Effect_Uncurried.runEffectFn1(Specular_Internal_Profiling.begin);
      };
      return function (v) {
          return Control_Applicative.pure(Effect.applicativeEffect)(Specular_Internal_Profiling.none);
      };
  })();
  exports["measure"] = measure;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Dom.Builder"] = $PS["Specular.Dom.Builder"] || {};
  var exports = $PS["Specular.Dom.Builder"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Apply = $PS["Control.Apply"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Cleanup = $PS["Control.Monad.Cleanup"];
  var Control_Monad_Reader_Class = $PS["Control.Monad.Reader.Class"];
  var Control_Monad_Replace = $PS["Control.Monad.Replace"];
  var Data_Maybe = $PS["Data.Maybe"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Ref = $PS["Effect.Ref"];
  var Specular_Dom_Browser = $PS["Specular.Dom.Browser"];
  var Specular_Internal_Effect = $PS["Specular.Internal.Effect"];
  var Specular_Internal_RIO = $PS["Specular.Internal.RIO"];
  var Specular_Profiling = $PS["Specular.Profiling"];                
  var Builder = function (x) {
      return x;
  };
  var runBuilderWithUserEnv = function (userEnv) {
      return function (parent) {
          return function (v) {
              return function __do() {
                  var actionsMutable = Specular_Internal_Effect.emptyDelayed();
                  var env = {
                      parent: parent,
                      cleanup: actionsMutable,
                      userEnv: userEnv
                  };
                  var result = Specular_Internal_RIO.runRIO(env)(v)();
                  var actions = Specular_Internal_Effect.unsafeFreezeDelayed(actionsMutable)();
                  return new Data_Tuple.Tuple(result, Specular_Internal_Effect.sequenceEffects(actions));
              };
          };
      };
  };
  var runBuilder$prime = function (env, v) {
      return v(env);
  };
  var runBuilder = runBuilderWithUserEnv(Data_Unit.unit);
  var monadEffectBuilder = Specular_Internal_RIO.monadEffectRIO;
  var monadBuilder = Specular_Internal_RIO.monadRIO;
  var mkBuilder$prime = function ($32) {
      return Builder(Specular_Internal_RIO.RIO($32));
  };
  var mkBuilder = function ($33) {
      return Builder(Specular_Internal_RIO.rio($33));
  };
  var monadCleanupBuilder = {
      onCleanup: function (action) {
          return mkBuilder(function (env) {
              return Specular_Internal_Effect.pushDelayed(env.cleanup)(action);
          });
      },
      Monad0: function () {
          return monadBuilder;
      }
  }; 
  var getEnv = Control_Monad_Reader_Class.ask(Specular_Internal_RIO.monadAskRIO);
  var bindBuilder = Specular_Internal_RIO.bindRIO;
  var applicativeBuilder = Specular_Internal_RIO.applicativeRIO;
  var monadReplaceBuilder = {
      newSlot: Control_Bind.bind(bindBuilder)(getEnv)(function (env) {
          return Control_Bind.bind(bindBuilder)(Effect_Class.liftEffect(monadEffectBuilder)(Specular_Dom_Browser.createTextNode("")))(function (placeholderBefore) {
              return Control_Bind.bind(bindBuilder)(Effect_Class.liftEffect(monadEffectBuilder)(Specular_Dom_Browser.createTextNode("")))(function (placeholderAfter) {
                  return Control_Bind.discard(Control_Bind.discardUnit)(bindBuilder)(Effect_Class.liftEffect(monadEffectBuilder)(Specular_Dom_Browser.appendChild(placeholderBefore)(env.parent)))(function () {
                      return Control_Bind.discard(Control_Bind.discardUnit)(bindBuilder)(Effect_Class.liftEffect(monadEffectBuilder)(Specular_Dom_Browser.appendChild(placeholderAfter)(env.parent)))(function () {
                          return Control_Bind.bind(bindBuilder)(Effect_Class.liftEffect(monadEffectBuilder)(Effect_Ref["new"](Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit)))))(function (cleanupRef) {
                              var replace = function (inner) {
                                  return Specular_Profiling.measure(Effect_Class.monadEffectEffect)("slot replace")(function __do() {
                                      Specular_Profiling.measure(Effect_Class.monadEffectEffect)("slot remove DOM")(Specular_Dom_Browser.removeAllBetween(placeholderBefore)(placeholderAfter))();
                                      var fragment = Specular_Dom_Browser.createDocumentFragment();
                                      var v = Specular_Profiling.measure(Effect_Class.monadEffectEffect)("slot init")(runBuilderWithUserEnv(env.userEnv)(fragment)(inner))();
                                      Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(cleanupRef))();
                                      var m_parent = Specular_Dom_Browser.parentNode(placeholderAfter)();
                                      (function () {
                                          if (m_parent instanceof Data_Maybe.Just) {
                                              Specular_Dom_Browser.insertBefore(fragment)(placeholderAfter)(m_parent.value0)();
                                              return Effect_Ref.write(Specular_Profiling.measure(Effect_Class.monadEffectEffect)("slot cleanup")(function __do() {
                                                  v.value1();
                                                  return Effect_Ref.write(Data_Monoid.mempty(Effect.monoidEffect(Data_Monoid.monoidUnit)))(cleanupRef)();
                                              }))(cleanupRef)();
                                          };
                                          if (m_parent instanceof Data_Maybe.Nothing) {
                                              return Effect_Ref.write(v.value1)(cleanupRef)();
                                          };
                                          throw new Error("Failed pattern match at Specular.Dom.Builder (line 118, column 9 - line 131, column 37): " + [ m_parent.constructor.name ]);
                                      })();
                                      return v.value0;
                                  });
                              };
                              var destroy = function __do() {
                                  Specular_Dom_Browser.removeAllBetween(placeholderBefore)(placeholderAfter)();
                                  Specular_Dom_Browser.removeNode(placeholderBefore)();
                                  Specular_Dom_Browser.removeNode(placeholderAfter)();
                                  return Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(cleanupRef))();
                              };
                              var append = function __do() {
                                  var fragment = Specular_Dom_Browser.createDocumentFragment();
                                  var v = runBuilderWithUserEnv(env.userEnv)(fragment)(Control_Monad_Replace.newSlot(monadReplaceBuilder))();
                                  Effect_Ref.modify_(function (v1) {
                                      return Control_Apply.applySecond(Effect.applyEffect)(v1)(v.value1);
                                  })(cleanupRef)();
                                  var m_parent = Specular_Dom_Browser.parentNode(placeholderAfter)();
                                  (function () {
                                      if (m_parent instanceof Data_Maybe.Just) {
                                          return Specular_Dom_Browser.insertBefore(fragment)(placeholderAfter)(m_parent.value0)();
                                      };
                                      if (m_parent instanceof Data_Maybe.Nothing) {
                                          return Data_Unit.unit;
                                      };
                                      throw new Error("Failed pattern match at Specular.Dom.Builder (line 150, column 9 - line 154, column 22): " + [ m_parent.constructor.name ]);
                                  })();
                                  return v.value0;
                              };
                              return Control_Bind.discard(Control_Bind.discardUnit)(bindBuilder)(Control_Monad_Cleanup.onCleanup(monadCleanupBuilder)(Control_Bind.join(Effect.bindEffect)(Effect_Ref.read(cleanupRef))))(function () {
                                  return Control_Applicative.pure(applicativeBuilder)(new Control_Monad_Replace.Slot(replace, destroy, append));
                              });
                          });
                      });
                  });
              });
          });
      }),
      Monad0: function () {
          return monadBuilder;
      },
      MonadCleanup1: function () {
          return monadCleanupBuilder;
      }
  };
  exports["runBuilder"] = runBuilder;
  exports["mkBuilder'"] = mkBuilder$prime;
  exports["runBuilder'"] = runBuilder$prime;
  exports["applicativeBuilder"] = applicativeBuilder;
  exports["bindBuilder"] = bindBuilder;
  exports["monadEffectBuilder"] = monadEffectBuilder;
  exports["monadCleanupBuilder"] = monadCleanupBuilder;
  exports["monadReplaceBuilder"] = monadReplaceBuilder;
})(PS);
(function(exports) {
  // getTextInputValue :: Node -> IOSync String
  exports.getTextInputValue = function (node) {
    return function () {
      return node.value;
    };
  };

  // setTextInputValue :: Node -> String -> IOSync String
  exports.setTextInputValue = function (node) {
    return function (value) {
      return function () {
        node.value = value;
      };
    };
  };
})(PS["Specular.Dom.Widgets.Input"] = PS["Specular.Dom.Widgets.Input"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Dom.Widgets.Input"] = $PS["Specular.Dom.Widgets.Input"] || {};
  var exports = $PS["Specular.Dom.Widgets.Input"];
  var $foreign = $PS["Specular.Dom.Widgets.Input"];
  exports["getTextInputValue"] = $foreign.getTextInputValue;
  exports["setTextInputValue"] = $foreign.setTextInputValue;
})(PS);
(function(exports) {
  // iterate :: forall a. EffectFn2 (Array a) (EffectFn1 a Unit) Unit
  exports.iterate = function (self, fn) {
    for (var i = 0; i < self.length; i++) {
      fn(self[i]);
    }
  };
})(PS["Specular.Internal.Incremental.Array"] = PS["Specular.Internal.Incremental.Array"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.Array"] = $PS["Specular.Internal.Incremental.Array"] || {};
  var exports = $PS["Specular.Internal.Incremental.Array"];
  var $foreign = $PS["Specular.Internal.Incremental.Array"];
  exports["iterate"] = $foreign.iterate;
})(PS);
(function(exports) {
  // new :: forall a. EffectFn1 a (Ref a)
  exports.new = function (value) {
    return { value: value };
  };

  // read :: forall a. EffectFn1 (Ref a) a
  exports.read = function (ref) {
    return ref.value;
  };

  // write :: forall a. EffectFn2 (Ref a) a Unit
  exports.write = function (ref, value) {
    ref.value = value;
  };
})(PS["Specular.Internal.Incremental.Ref"] = PS["Specular.Internal.Incremental.Ref"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.Ref"] = $PS["Specular.Internal.Incremental.Ref"] || {};
  var exports = $PS["Specular.Internal.Incremental.Ref"];
  var $foreign = $PS["Specular.Internal.Incremental.Ref"];
  exports["new"] = $foreign["new"];
  exports["read"] = $foreign.read;
  exports["write"] = $foreign.write;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.Global"] = $PS["Specular.Internal.Incremental.Global"] || {};
  var exports = $PS["Specular.Internal.Incremental.Global"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Specular_Internal_Incremental_Ref = $PS["Specular.Internal.Incremental.Ref"];                
  var stabilizationIsNotInProgress = -1 | 0;
  var globalTotalRefcount = Effect_Unsafe.unsafePerformEffect(function () {
      return Specular_Internal_Incremental_Ref["new"](0);
  });
  var globalLastStabilizationNum = Effect_Unsafe.unsafePerformEffect(function () {
      return Specular_Internal_Incremental_Ref["new"](0);
  });
  var globalCurrentStabilizationNum = Effect_Unsafe.unsafePerformEffect(function () {
      return Specular_Internal_Incremental_Ref["new"](stabilizationIsNotInProgress);
  });
  exports["stabilizationIsNotInProgress"] = stabilizationIsNotInProgress;
  exports["globalLastStabilizationNum"] = globalLastStabilizationNum;
  exports["globalCurrentStabilizationNum"] = globalCurrentStabilizationNum;
  exports["globalTotalRefcount"] = globalTotalRefcount;
})(PS);
(function(exports) {
  // empty :: forall a. Effect (MutableArray a)
  exports.empty = function () {
    return [];
  };

  // push :: forall a. EffectFn2 (MutableArray a) a Unit
  exports.push = function (self, x) {
    self.push(x);
  };

  // remove :: forall a. EffectFn2 (MutableArray a) a Unit
  exports.remove = function (self, x) {
    var index = self.indexOf(x);
    if (index !== -1) {
      self.splice(index, 1);
    }
  };

  // length :: forall a. EffectFn1 (MutableArray a) Int
  exports.length = function (self) {
    return self.length;
  };

  // iterate :: forall a. EffectFn2 (MutableArray a) (EffectFn1 a Unit) Unit
  exports.iterate = function (self, fn) {
    for (var i = 0; i < self.length; i++) {
      fn(self[i]);
    }
  };
})(PS["Specular.Internal.Incremental.MutableArray"] = PS["Specular.Internal.Incremental.MutableArray"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.MutableArray"] = $PS["Specular.Internal.Incremental.MutableArray"] || {};
  var exports = $PS["Specular.Internal.Incremental.MutableArray"];
  var $foreign = $PS["Specular.Internal.Incremental.MutableArray"];
  exports["empty"] = $foreign.empty;
  exports["push"] = $foreign.push;
  exports["length"] = $foreign.length;
  exports["remove"] = $foreign.remove;
  exports["iterate"] = $foreign.iterate;
})(PS);
(function(exports) {
  exports._new = function (none, source, dependents, observers, value, height) {
    return {
      source: source,
      dependents: dependents,
      observers: observers,
      value: value,
      height: height,
      adjustedHeight: height,
      inRecomputeQueue: false,
      nextInRecomputeQueue: none,
      name: "",

      // For initial `changedAt` we want a value lower than all possible stabilization numbers, but different than `stabilizationIsNotInProgress`.
      // Hence -2.
      changedAt: -2,
    };
  };

  // [[[cog
  // immutable_fields = [
  //   ['dependents', 'MutableArray SomeNode'],
  //   ['observers', 'MutableArray (Observer a)'],
  //   ['source', 'Source a'],
  // ]
  // mutable_fields = [
  //   ['adjustedHeight', 'Int'],
  //   ['changedAt', 'Int'],
  //   ['height', 'Int'],
  //   ['name', 'String'],
  //   ['value', 'Optional a'],
  // ]
  // for name, _ in immutable_fields:
  //     cog.outl("""
  //     exports.get_%(name)s = function(node) { return node.%(name)s; };
  //     """ % {'name': name})
  // for name, _ in mutable_fields:
  //     cog.outl("""
  //     exports.get_%(name)s = function(node) { return node.%(name)s; };
  //     exports.set_%(name)s = function(node, value) { node.%(name)s = value; };
  //     """ % {'name': name})
  // ]]]

  exports.get_dependents = function (node) {
    return node.dependents;
  };

  exports.get_observers = function (node) {
    return node.observers;
  };

  exports.get_source = function (node) {
    return node.source;
  };

  exports.get_adjustedHeight = function (node) {
    return node.adjustedHeight;
  };
  exports.set_adjustedHeight = function (node, value) {
    node.adjustedHeight = value;
  };
  exports.set_changedAt = function (node, value) {
    node.changedAt = value;
  };

  exports.get_height = function (node) {
    return node.height;
  };
  exports.set_height = function (node, value) {
    node.height = value;
  };

  exports.get_name = function (node) {
    return node.name;
  };
  exports.set_name = function (node, value) {
    node.name = value;
  };

  exports.get_value = function (node) {
    return node.value;
  };
  exports.set_value = function (node, value) {
    node.value = value;
  };
})(PS["Specular.Internal.Incremental.Node"] = PS["Specular.Internal.Incremental.Node"] || {});
(function(exports) {
  exports.none = {
    toString: function () {
      return "none";
    },
  };
})(PS["Specular.Internal.Incremental.Optional"] = PS["Specular.Internal.Incremental.Optional"] || {});
(function(exports) {
  "use strict";

  // module Partial.Unsafe

  exports._unsafePartial = function (f) {
    return f();
  };
})(PS["Partial.Unsafe"] = PS["Partial.Unsafe"] || {});
(function(exports) {
  "use strict";

  // module Partial

  exports._crashWith = function (msg) {
    throw new Error(msg);
  };
})(PS["Partial"] = PS["Partial"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial"] = $PS["Partial"] || {};
  var exports = $PS["Partial"];
  var $foreign = $PS["Partial"];         
  var crashWith = function (dictPartial) {
      return $foreign["_crashWith"];
  };
  exports["crashWith"] = crashWith;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Partial.Unsafe"] = $PS["Partial.Unsafe"] || {};
  var exports = $PS["Partial.Unsafe"];
  var $foreign = $PS["Partial.Unsafe"];
  var Partial = $PS["Partial"];                
  var unsafePartial = $foreign["_unsafePartial"];
  var unsafeCrashWith = function (msg) {
      return unsafePartial(function (dictPartial) {
          return Partial.crashWith()(msg);
      });
  };
  exports["unsafeCrashWith"] = unsafeCrashWith;
})(PS);
(function(exports) {
  "use strict";

  exports.reallyUnsafeRefEq = function (a) {
    return function (b) {
      return a === b;
    };
  };
})(PS["Unsafe.Reference"] = PS["Unsafe.Reference"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Unsafe.Reference"] = $PS["Unsafe.Reference"] || {};
  var exports = $PS["Unsafe.Reference"];
  var $foreign = $PS["Unsafe.Reference"];
  var unsafeRefEq = $foreign.reallyUnsafeRefEq;
  exports["unsafeRefEq"] = unsafeRefEq;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.Optional"] = $PS["Specular.Internal.Incremental.Optional"] || {};
  var exports = $PS["Specular.Internal.Incremental.Optional"];
  var $foreign = $PS["Specular.Internal.Incremental.Optional"];
  var Data_Boolean = $PS["Data.Boolean"];
  var Partial_Unsafe = $PS["Partial.Unsafe"];
  var Unsafe_Reference = $PS["Unsafe.Reference"];                
  var Optional = function (x) {
      return x;
  };
  var some = Optional;
  var isSome = function (opt) {
      return !Unsafe_Reference.unsafeRefEq(opt)($foreign.none);
  };
  var fromSome = function (v) {
      if (isSome(v)) {
          return v;
      };
      if (Data_Boolean.otherwise) {
          return Partial_Unsafe.unsafeCrashWith("Optional.fromSome: none");
      };
      throw new Error("Failed pattern match at Specular.Internal.Incremental.Optional (line 24, column 1 - line 24, column 38): " + [ v.constructor.name ]);
  };
  exports["some"] = some;
  exports["isSome"] = isSome;
  exports["fromSome"] = fromSome;
  exports["none"] = $foreign.none;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.Node"] = $PS["Specular.Internal.Incremental.Node"] || {};
  var exports = $PS["Specular.Internal.Incremental.Node"];
  var $foreign = $PS["Specular.Internal.Incremental.Node"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Specular_Internal_Incremental_MutableArray = $PS["Specular.Internal.Incremental.MutableArray"];
  var Specular_Internal_Incremental_Optional = $PS["Specular.Internal.Incremental.Optional"];
  var Specular_Internal_Profiling = $PS["Specular.Internal.Profiling"];
  var Unsafe_Coerce = $PS["Unsafe.Coerce"];                
  var valueExc = function (node) {
      var value_opt = $foreign.get_value(node);
      return Specular_Internal_Incremental_Optional.fromSome(value_opt);
  };                                               
  var toSomeNode = Unsafe_Coerce.unsafeCoerce;
  var refcount = function (node) {
      var observers = $foreign.get_observers(node);
      var numDependents = Specular_Internal_Incremental_MutableArray.length(observers);
      var dependents = $foreign.get_dependents(node);
      var numObservers = Specular_Internal_Incremental_MutableArray.length(dependents);
      return numDependents + numObservers | 0;
  };
  var name = function (node) {
      return Effect_Unsafe.unsafePerformEffect(function () {
          return $foreign.get_name(node);
      });
  };
  var create = function (source) {
      var dependents = Specular_Internal_Incremental_MutableArray.empty();
      var observers = Specular_Internal_Incremental_MutableArray.empty();
      return $foreign["_new"](Specular_Internal_Incremental_Optional.none, source, dependents, observers, Specular_Internal_Incremental_Optional.none, 0);
  };
  var annotate = (function () {
      if (Specular_Internal_Profiling.enabled) {
          return $foreign.set_name;
      };
      return function (v, v1) {
          return Data_Unit.unit;
      };
  })();
  exports["annotate"] = annotate;
  exports["create"] = create;
  exports["name"] = name;
  exports["refcount"] = refcount;
  exports["toSomeNode"] = toSomeNode;
  exports["valueExc"] = valueExc;
  exports["get_adjustedHeight"] = $foreign.get_adjustedHeight;
  exports["get_dependents"] = $foreign.get_dependents;
  exports["get_height"] = $foreign.get_height;
  exports["get_name"] = $foreign.get_name;
  exports["get_observers"] = $foreign.get_observers;
  exports["get_source"] = $foreign.get_source;
  exports["get_value"] = $foreign.get_value;
  exports["set_adjustedHeight"] = $foreign.set_adjustedHeight;
  exports["set_changedAt"] = $foreign.set_changedAt;
  exports["set_height"] = $foreign.set_height;
  exports["set_value"] = $foreign.set_value;
})(PS);
(function(exports) {
  // new :: forall a.
  //   EffectFn4
  //     (Optional Any)                 -- Optional.none
  //     (Field a Mutable Int)          -- Priority. Must be a non-negative integer.
  //     (Field a Mutable Boolean)      -- Is the entry present in this queue?
  //     (Field a Mutable (Optional a)) -- Next entry with the same priority
  //   (PQ a)
  exports.new = function (none, priorityField, presentField, nextField) {
    return {
      none: none,

      // Property names of various properties of queue elements.
      priorityField: priorityField,
      presentField: presentField,
      nextField: nextField,

      // Array indexed by priority.
      // Elements within each priority are stored in an intrusive linked list:
      // - `this.none` is the end
      // - `element[this.nextField]` is the next element.
      // `priorityHeads[priority]` contains the head of this list (or `none` if empty).
      priorityHeads: [],

      // Total number of elements in the queue.
      count: 0,

      // TODO: we should track minPriority
    };
  };

  var PRIORITY_WARNING_MARK = 250;

  // add :: forall a. EffectFn2 (PQ a) a Boolean
  exports.add = function (pq, node) {
    if (node[pq.presentField]) {
      return false;
    }

    node[pq.presentField] = true;
    pq.count++;

    var priority = node[pq.priorityField];

    while (priority >= pq.priorityHeads.length) {
      pq.priorityHeads.push(pq.none);

      if (pq.priorityHeads.length === PRIORITY_WARNING_MARK) {
        console.warn("Specular: Node height reached " + PRIORITY_WARNING_MARK);
      }
    }

    node[pq.nextField] = pq.priorityHeads[priority];
    pq.priorityHeads[priority] = node;

    return true;
  };

  var removeMin = function (pq) {
    for (var priority = 0; priority < pq.priorityHeads.length; priority++) {
      var node = pq.priorityHeads[priority];
      if (node !== pq.none) {
        node[pq.presentField] = false;
        pq.priorityHeads[priority] = node[pq.nextField];
        node[pq.nextField] = pq.none;
        pq.count--;
        return node;
      }
    }
    return pq.none;
  };

  // drain :: forall a. EffectFn2 (PQ a) (EffectFn1 a Unit) Unit
  exports.drain = function (pq, fn) {
    while (pq.count > 0) {
      fn(removeMin(pq));
    }
  };
})(PS["Specular.Internal.Incremental.PriorityQueue"] = PS["Specular.Internal.Incremental.PriorityQueue"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental.PriorityQueue"] = $PS["Specular.Internal.Incremental.PriorityQueue"] || {};
  var exports = $PS["Specular.Internal.Incremental.PriorityQueue"];
  var $foreign = $PS["Specular.Internal.Incremental.PriorityQueue"];
  exports["new"] = $foreign["new"];
  exports["add"] = $foreign.add;
  exports["drain"] = $foreign.drain;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Incremental"] = $PS["Specular.Internal.Incremental"] || {};
  var exports = $PS["Specular.Internal.Incremental"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Data_Ord = $PS["Data.Ord"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Specular_Internal_Incremental_Array = $PS["Specular.Internal.Incremental.Array"];
  var Specular_Internal_Incremental_Global = $PS["Specular.Internal.Incremental.Global"];
  var Specular_Internal_Incremental_MutableArray = $PS["Specular.Internal.Incremental.MutableArray"];
  var Specular_Internal_Incremental_Node = $PS["Specular.Internal.Incremental.Node"];
  var Specular_Internal_Incremental_Optional = $PS["Specular.Internal.Incremental.Optional"];
  var Specular_Internal_Incremental_PriorityQueue = $PS["Specular.Internal.Incremental.PriorityQueue"];
  var Specular_Internal_Incremental_Ref = $PS["Specular.Internal.Incremental.Ref"];
  var Specular_Internal_Profiling = $PS["Specular.Internal.Profiling"];
  var readVar = function (v) {
      return v;
  };
  var newVar = function (val) {
      var node = Specular_Internal_Incremental_Node.create({
          compute: function (node) {
              var value = Specular_Internal_Incremental_Node.valueExc(node);
              return Specular_Internal_Incremental_Optional.some(value);
          },
          dependencies: Control_Applicative.pure(Effect.applicativeEffect)([  ])
      });
      Specular_Internal_Incremental_Node.set_value(node, Specular_Internal_Incremental_Optional.some(val));
      return node;
  };   
  var globalRecomputeQueue = Effect_Unsafe.unsafePerformEffect(function () {
      return Specular_Internal_Incremental_PriorityQueue["new"](Specular_Internal_Incremental_Optional.none, "height", "inRecomputeQueue", "nextInRecomputeQueue");
  });
  var setVar = function (v, val) {
      Specular_Internal_Incremental_Node.set_value(v, Specular_Internal_Incremental_Optional.some(val));
      Specular_Internal_Incremental_PriorityQueue.add(globalRecomputeQueue, Specular_Internal_Incremental_Node.toSomeNode(v));
      return Data_Unit.unit;
  };
  var ensureHeight = function (node, newHeight) {
      var oldAdjustedHeight = Specular_Internal_Incremental_Node.get_adjustedHeight(node);
      return Specular_Internal_Incremental_Node.set_adjustedHeight(node, Data_Ord.max(Data_Ord.ordInt)(oldAdjustedHeight)(newHeight));
  };
  var recomputeNode = function (node) {
      var height = Specular_Internal_Incremental_Node.get_height(node);
      var adjustedHeight = Specular_Internal_Incremental_Node.get_adjustedHeight(node);
      var $22 = adjustedHeight > height;
      if ($22) {
          var mark = Specular_Internal_Profiling.begin("bump height " + Specular_Internal_Incremental_Node.name(node));
          var dependents = Specular_Internal_Incremental_Node.get_dependents(node);
          Specular_Internal_Incremental_MutableArray.iterate(dependents, function (dependent) {
              return ensureHeight(dependent, adjustedHeight + 1 | 0);
          });
          Specular_Internal_Incremental_Node.set_height(node, adjustedHeight);
          Specular_Internal_Incremental_PriorityQueue.add(globalRecomputeQueue, node);
          return Specular_Internal_Profiling.end(mark);
      };
      var mark = Specular_Internal_Profiling.begin("compute " + Specular_Internal_Incremental_Node.name(node));
      var source = Specular_Internal_Incremental_Node.get_source(node);
      var newValue_opt = source.compute(node);
      (function () {
          var $23 = Specular_Internal_Incremental_Optional.isSome(newValue_opt);
          if ($23) {
              var newValue = Specular_Internal_Incremental_Optional.fromSome(newValue_opt);
              Specular_Internal_Incremental_Node.set_value(node, Specular_Internal_Incremental_Optional.some(newValue));
              var currentStabilizationNum = Specular_Internal_Incremental_Ref.read(Specular_Internal_Incremental_Global.globalCurrentStabilizationNum);
              Specular_Internal_Incremental_Node.set_changedAt(node, currentStabilizationNum);
              var dependents = Specular_Internal_Incremental_Node.get_dependents(node);
              Specular_Internal_Incremental_MutableArray.iterate(dependents, function (dependent) {
                  var _added = Specular_Internal_Incremental_PriorityQueue.add(globalRecomputeQueue, dependent);
                  return Data_Unit.unit;
              });
              var observers = Specular_Internal_Incremental_Node.get_observers(node);
              return Specular_Internal_Incremental_MutableArray.iterate(observers, function (observer) {
                  return observer(newValue);
              });
          };
          return Data_Unit.unit;
      })();
      return Specular_Internal_Profiling.end(mark);
  };
  var stabilize = function __do() {
      var mark = Specular_Internal_Profiling.begin("stabilize");
      var oldStabilizationNum = Specular_Internal_Incremental_Ref.read(Specular_Internal_Incremental_Global.globalLastStabilizationNum);
      var currentStabilizationNum = oldStabilizationNum + 1 | 0;
      Specular_Internal_Incremental_Ref.write(Specular_Internal_Incremental_Global.globalLastStabilizationNum, currentStabilizationNum);
      Specular_Internal_Incremental_Ref.write(Specular_Internal_Incremental_Global.globalCurrentStabilizationNum, currentStabilizationNum);
      Specular_Internal_Incremental_PriorityQueue.drain(globalRecomputeQueue, recomputeNode);
      Specular_Internal_Incremental_Ref.write(Specular_Internal_Incremental_Global.globalCurrentStabilizationNum, Specular_Internal_Incremental_Global.stabilizationIsNotInProgress);
      return Specular_Internal_Profiling.end(mark);
  };
  var removeDependent = function (node, dependent) {
      var oldRefcount = Specular_Internal_Incremental_Node.refcount(node);
      var dependents = Specular_Internal_Incremental_Node.get_dependents(node);
      Specular_Internal_Incremental_MutableArray.remove(dependents, dependent);
      return handleRefcountChange(node, oldRefcount);
  };
  var handleRefcountChange = function (node, oldRefcount) {
      var newcount = Specular_Internal_Incremental_Node.refcount(node);
      (function () {
          var $24 = oldRefcount === 0 && newcount > 0;
          if ($24) {
              return connect(node);
          };
          var $25 = oldRefcount > 0 && newcount === 0;
          if ($25) {
              return disconnect(node);
          };
          return Data_Unit.unit;
      })();
      var oldTotalRefcount = Specular_Internal_Incremental_Ref.read(Specular_Internal_Incremental_Global.globalTotalRefcount);
      return Specular_Internal_Incremental_Ref.write(Specular_Internal_Incremental_Global.globalTotalRefcount, (oldTotalRefcount - oldRefcount | 0) + newcount | 0);
  };
  var disconnect = function (node) {
      var mark = Specular_Internal_Profiling.begin("disconnect " + Specular_Internal_Incremental_Node.name(node));
      var source = Specular_Internal_Incremental_Node.get_source(node);
      var dependencies = source.dependencies();
      Specular_Internal_Incremental_Array.iterate(dependencies, function (dependency) {
          return removeDependent(dependency, Specular_Internal_Incremental_Node.toSomeNode(node));
      });
      return Specular_Internal_Profiling.end(mark);
  };
  var connect = function (node) {
      var mark = Specular_Internal_Profiling.begin("connect " + Specular_Internal_Incremental_Node.name(node));
      var source = Specular_Internal_Incremental_Node.get_source(node);
      var dependencies = source.dependencies();
      Specular_Internal_Incremental_Array.iterate(dependencies, function (dependency) {
          addDependent(dependency, Specular_Internal_Incremental_Node.toSomeNode(node));
          var dependencyHeight = Specular_Internal_Incremental_Node.get_height(dependency);
          var ourHeight = Specular_Internal_Incremental_Node.get_height(node);
          var $26 = (dependencyHeight + 1 | 0) > ourHeight;
          if ($26) {
              Specular_Internal_Incremental_Node.set_height(node, dependencyHeight + 1 | 0);
              return Specular_Internal_Incremental_Node.set_adjustedHeight(node, dependencyHeight + 1 | 0);
          };
          return Data_Unit.unit;
      });
      var value = source.compute(node);
      Specular_Internal_Incremental_Node.set_value(node, value);
      return Specular_Internal_Profiling.end(mark);
  };
  var addDependent = function (node, dependent) {
      var oldRefcount = Specular_Internal_Incremental_Node.refcount(node);
      var dependents = Specular_Internal_Incremental_Node.get_dependents(node);
      Specular_Internal_Incremental_MutableArray.push(dependents, dependent);
      return handleRefcountChange(node, oldRefcount);
  };
  var addObserver = function (node, observer) {
      var oldRefcount = Specular_Internal_Incremental_Node.refcount(node);
      var observers = Specular_Internal_Incremental_Node.get_observers(node);
      Specular_Internal_Incremental_MutableArray.push(observers, observer);
      return handleRefcountChange(node, oldRefcount);
  };
  var removeObserver = function (node, observer) {
      var oldRefcount = Specular_Internal_Incremental_Node.refcount(node);
      var observers = Specular_Internal_Incremental_Node.get_observers(node);
      Specular_Internal_Incremental_MutableArray.remove(observers, observer);
      return handleRefcountChange(node, oldRefcount);
  };
  exports["newVar"] = newVar;
  exports["setVar"] = setVar;
  exports["readVar"] = readVar;
  exports["addObserver"] = addObserver;
  exports["removeObserver"] = removeObserver;
  exports["stabilize"] = stabilize;
})(PS);
(function(exports) {
  // foreign import new :: forall a. Effect (Queue a)
  exports.new = function () {
    return {
      elements: [],
      end: 0,
      first: 0,
    };
  };

  // foreign import enqueue :: forall a. EffectFn2 (Queue a) a Unit
  exports.enqueue = function (q, elem) {
    q.elements[q.end] = elem;
    q.end++;
  };

  // foreign import drain :: forall a. EffectFn2 (Queue a) (EffectFn1 a Unit) Unit
  exports.drain = function (q, fn) {
    while (q.first < q.end) {
      var elem = q.elements[q.first];
      q.elements[q.first] = undefined;
      q.first++;
      fn(elem);
    }
    q.first = 0;
    q.end = 0;
  };
})(PS["Specular.Internal.Queue"] = PS["Specular.Internal.Queue"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Internal.Queue"] = $PS["Specular.Internal.Queue"] || {};
  var exports = $PS["Specular.Internal.Queue"];
  var $foreign = $PS["Specular.Internal.Queue"];
  exports["new"] = $foreign["new"];
  exports["enqueue"] = $foreign.enqueue;
  exports["drain"] = $foreign.drain;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.FRP.Base"] = $PS["Specular.FRP.Base"] || {};
  var exports = $PS["Specular.FRP.Base"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Unsafe = $PS["Effect.Unsafe"];
  var Specular_Internal_Incremental = $PS["Specular.Internal.Incremental"];
  var Specular_Internal_Incremental_Node = $PS["Specular.Internal.Incremental.Node"];
  var Specular_Internal_Incremental_Optional = $PS["Specular.Internal.Incremental.Optional"];
  var Specular_Internal_Profiling = $PS["Specular.Internal.Profiling"];
  var Specular_Internal_Queue = $PS["Specular.Internal.Queue"];
  var readNode = function (node) {
      var handler = function (v) {
          return Data_Unit.unit;
      };
      return function __do() {
          Specular_Internal_Incremental.addObserver(node, handler);
          var value = Specular_Internal_Incremental_Node.get_value(node);
          Specular_Internal_Incremental.removeObserver(node, handler);
          return Specular_Internal_Incremental_Optional.fromSome(value);
      };
  };
  var readDynamic = function (dictMonadEffect) {
      return function (v) {
          return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
              var mark = Specular_Internal_Profiling.begin("readDynamic");
              var result = readNode(v)();
              Specular_Internal_Profiling.end(mark);
              return result;
          });
      };
  };
  var globalEffectQueue = Effect_Unsafe.unsafePerformEffect(Specular_Internal_Queue["new"]);
  var drainEffects = function () {
      return Specular_Internal_Queue.drain(globalEffectQueue, function (handler) {
          return handler();
      });
  };
  var stabilize = function __do() {
      var mark = Specular_Internal_Profiling.begin("Specular.stabilize");
      Specular_Internal_Incremental.stabilize();
      drainEffects();
      return Specular_Internal_Profiling.end(mark);
  };
  var newDynamic = function (dictMonadEffect) {
      return function (initial) {
          return Effect_Class.liftEffect(dictMonadEffect)(function __do() {
              var $$var = Specular_Internal_Incremental.newVar(initial);
              Specular_Internal_Incremental_Node.annotate(Specular_Internal_Incremental.readVar($$var), "root Dynamic");
              var dynamic = Specular_Internal_Incremental.readVar($$var);
              return {
                  dynamic: dynamic,
                  read: readDynamic(Effect_Class.monadEffectEffect)(dynamic),
                  set: function (x) {
                      return function __do() {
                          var name = Specular_Internal_Incremental_Node.get_name(Specular_Internal_Incremental.readVar($$var));
                          var mark = Specular_Internal_Profiling.begin("set " + name);
                          Specular_Internal_Incremental.setVar($$var, x);
                          stabilize();
                          return Specular_Internal_Profiling.end(mark);
                      };
                  },
                  modify: function (f) {
                      return function __do() {
                          var name = Specular_Internal_Incremental_Node.get_name(Specular_Internal_Incremental.readVar($$var));
                          var mark = Specular_Internal_Profiling.begin("modify " + name);
                          var x = Specular_Internal_Incremental_Node.valueExc(Specular_Internal_Incremental.readVar($$var));
                          Specular_Internal_Incremental.setVar($$var, f(x));
                          stabilize();
                          return Specular_Internal_Profiling.end(mark);
                      };
                  }
              };
          });
      };
  };
  var changed = function (v) {
      return v;
  };
  var annotate = function (dictMonadEffect) {
      return function (v) {
          return function (name) {
              return Effect_Class.liftEffect(dictMonadEffect)(function () {
                  return Specular_Internal_Incremental_Node.annotate(v, name);
              });
          };
      };
  };
  var _subscribeNode = function (handler, node) {
      var h = function (value) {
          return Specular_Internal_Queue.enqueue(globalEffectQueue, handler(value));
      };
      Specular_Internal_Incremental.addObserver(node, h);
      return function () {
          return Specular_Internal_Incremental.removeObserver(node, h);
      };
  };
  var _subscribeEvent = function (handler, v) {
      return _subscribeNode(handler, v);
  };
  exports["changed"] = changed;
  exports["readDynamic"] = readDynamic;
  exports["newDynamic"] = newDynamic;
  exports["_subscribeEvent"] = _subscribeEvent;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Dom.Element"] = $PS["Specular.Dom.Element"] || {};
  var exports = $PS["Specular.Dom.Element"];
  var Data_Function = $PS["Data.Function"];
  var Data_Monoid = $PS["Data.Monoid"];
  var Data_Semigroup = $PS["Data.Semigroup"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Effect_Uncurried = $PS["Effect.Uncurried"];
  var Foreign_Object = $PS["Foreign.Object"];
  var Specular_Dom_Browser = $PS["Specular.Dom.Browser"];
  var Specular_Dom_Builder = $PS["Specular.Dom.Builder"];
  var Specular_Dom_Widgets_Input = $PS["Specular.Dom.Widgets.Input"];
  var Specular_FRP_Base = $PS["Specular.FRP.Base"];
  var Specular_Internal_Effect = $PS["Specular.Internal.Effect"];
  var Specular_Internal_Profiling = $PS["Specular.Internal.Profiling"];
  var Specular_Profiling = $PS["Specular.Profiling"];                
  var Prop = function (x) {
      return x;
  };
  var unsafeEventTarget = function (e) {
      return e.target;
  };
  var withTargetValue = function (cb) {
      return function (event) {
          return function __do() {
              var value = Specular_Dom_Widgets_Input.getTextInputValue(unsafeEventTarget(event))();
              return cb(value)();
          };
      };
  };
  var text = function (str) {
      return Specular_Dom_Builder["mkBuilder'"](function (env) {
          var node = Specular_Dom_Browser.createTextNode(str)();
          return Specular_Dom_Browser.appendChild(node)(env.parent)();
      });
  };                                                                                
  var semigroupProp = {
      append: function (v) {
          return function (v1) {
              return Prop(function (node, cleanups) {
                  v(node, cleanups);
                  return v1(node, cleanups);
              });
          };
      }
  };                                                       
  var on = function (eventType) {
      return function (cb) {
          return Prop(function (node, _cleanups) {
              Specular_Dom_Browser.addEventListener(eventType)(function (e) {
                  return Specular_Profiling.measure(Effect_Class.monadEffectEffect)("event: " + eventType)(cb(e));
              })(node)();
              return Data_Unit.unit;
          });
      };
  };
  var initElement = function (env, node, props, body) {
      var mark = Specular_Internal_Profiling.begin("el");
      var result = Specular_Dom_Builder["runBuilder'"]({
          parent: node,
          cleanup: env.cleanup,
          userEnv: env.userEnv
      }, body);
      Effect.foreachE(props)(function (v) {
          return function () {
              return v(node, env.cleanup);
          };
      })();
      Specular_Dom_Browser.appendChild(node)(env.parent)();
      Specular_Internal_Profiling.end(mark);
      return result;
  };
  var el = function (tagName) {
      return function (props) {
          return function (body) {
              return Specular_Dom_Builder["mkBuilder'"](function (env) {
                  var node = Specular_Dom_Browser.createElement(tagName)();
                  return initElement(env, node, props, body);
              });
          };
      };
  };
  var el_ = function (tagName) {
      return el(tagName)(Data_Monoid.mempty(Data_Monoid.monoidArray));
  };
  var attrs = function (a) {
      return Prop(function (node, v) {
          return Specular_Dom_Browser.setAttributes(node)(a)();
      });
  };
  var attr = function (name) {
      return function (value) {
          return attrs(Foreign_Object.singleton(name)(value));
      };
  };
  var _subscribeDyn = function (cleanups, dyn, handler) {
      var unsub = Specular_FRP_Base["_subscribeEvent"](Effect_Uncurried.runEffectFn1(handler), Specular_FRP_Base.changed(dyn));
      Specular_Internal_Effect.pushDelayed(cleanups)(unsub)();
      var initialValue = Specular_FRP_Base.readDynamic(Effect_Class.monadEffectEffect)(dyn)();
      return handler(initialValue);
  };
  var valueD = function (dyn) {
      return Prop(function (node, cleanups) {
          return _subscribeDyn(cleanups, dyn, Effect_Uncurried.mkEffectFn1(Specular_Dom_Widgets_Input.setTextInputValue(node)));
      });
  };
  var bindValueOnChange = function (v) {
      return Data_Semigroup.append(semigroupProp)(valueD(v.value0))(on("change")(withTargetValue(function ($57) {
          return v.value1(Data_Function["const"]($57));
      })));
  };
  exports["el"] = el;
  exports["el_"] = el_;
  exports["text"] = text;
  exports["attr"] = attr;
  exports["bindValueOnChange"] = bindValueOnChange;
})(PS);
(function(exports) {
  // documentBody :: IOSync Node
  exports.documentBody = function () {
    return document.body;
  };
})(PS["Specular.Dom.Widget"] = PS["Specular.Dom.Widget"] || {});
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Dom.Widget"] = $PS["Specular.Dom.Widget"] || {};
  var exports = $PS["Specular.Dom.Widget"];
  var $foreign = $PS["Specular.Dom.Widget"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Control_Monad_Cleanup = $PS["Control.Monad.Cleanup"];
  var Control_Monad_Replace = $PS["Control.Monad.Replace"];
  var Data_Functor = $PS["Data.Functor"];
  var Data_Tuple = $PS["Data.Tuple"];
  var Data_Unit = $PS["Data.Unit"];
  var Effect = $PS["Effect"];
  var Effect_Class = $PS["Effect.Class"];
  var Specular_Dom_Builder = $PS["Specular.Dom.Builder"];                            
  var runWidgetInNode = function (parent) {
      return function (widget) {
          return Specular_Dom_Builder.runBuilder(parent)(Control_Bind.bind(Specular_Dom_Builder.bindBuilder)(Control_Monad_Replace.newSlot(Specular_Dom_Builder.monadReplaceBuilder))(function (slot) {
              return Control_Bind.discard(Control_Bind.discardUnit)(Specular_Dom_Builder.bindBuilder)(Control_Monad_Cleanup.onCleanup(Specular_Dom_Builder.monadCleanupBuilder)(Control_Monad_Replace.destroySlot(slot)))(function () {
                  return Effect_Class.liftEffect(Specular_Dom_Builder.monadEffectBuilder)(Control_Monad_Replace.replaceSlot(slot)(widget));
              });
          }));
      };
  };
  var runMainWidgetInNode = function (parent) {
      return function (widget) {
          return Data_Functor.map(Effect.functorEffect)(Data_Tuple.fst)(runWidgetInNode(parent)(widget));
      };
  };
  var runMainWidgetInBody = function (widget) {
      return function __do() {
          var body = $foreign.documentBody();
          return runMainWidgetInNode(body)(widget)();
      };
  };
  var emptyWidget = Control_Applicative.pure(Specular_Dom_Builder.applicativeBuilder)(Data_Unit.unit);
  exports["runMainWidgetInBody"] = runMainWidgetInBody;
  exports["emptyWidget"] = emptyWidget;
})(PS);
(function($PS) {
  // Generated by purs version 0.14.5
  "use strict";
  $PS["Specular.Ref"] = $PS["Specular.Ref"] || {};
  var exports = $PS["Specular.Ref"];
  var Control_Applicative = $PS["Control.Applicative"];
  var Control_Bind = $PS["Control.Bind"];
  var Effect_Class = $PS["Effect.Class"];
  var Specular_FRP_Base = $PS["Specular.FRP.Base"];                              
  var Ref = (function () {
      function Ref(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Ref.create = function (value0) {
          return function (value1) {
              return new Ref(value0, value1);
          };
      };
      return Ref;
  })();
  var $$new = function (dictMonadEffect) {
      return function (initial) {
          return Control_Bind.bind((dictMonadEffect.Monad0()).Bind1())(Specular_FRP_Base.newDynamic(dictMonadEffect)(initial))(function (v) {
              return Control_Applicative.pure((dictMonadEffect.Monad0()).Applicative0())(new Ref(v.dynamic, v.modify));
          });
      };
  };
  var modify = function (dictMonadEffect) {
      return function (v) {
          var $65 = Effect_Class.liftEffect(dictMonadEffect);
          return function ($66) {
              return $65(v.value1($66));
          };
      };
  };
  exports["new"] = $$new;
})(PS);
(function($PS) {
  "use strict";
  $PS["Main"] = $PS["Main"] || {};
  var exports = $PS["Main"];
  var Control_Bind = $PS["Control.Bind"];
  var Data_Show = $PS["Data.Show"];
  var Specular_Dom_Builder = $PS["Specular.Dom.Builder"];
  var Specular_Dom_Element = $PS["Specular.Dom.Element"];
  var Specular_Dom_Widget = $PS["Specular.Dom.Widget"];
  var Specular_Ref = $PS["Specular.Ref"];                
  var Fahrenheit = function (x) {
      return x;
  };
  var Celsius = function (x) {
      return x;
  };
  var showFahrenheit = Data_Show.showNumber;
  var showCelsius = Data_Show.showNumber;
  var main = Specular_Dom_Widget.runMainWidgetInBody(Control_Bind.bind(Specular_Dom_Builder.bindBuilder)(Specular_Ref["new"](Specular_Dom_Builder.monadEffectBuilder)("0.0"))(function (v) {
      return Control_Bind.bind(Specular_Dom_Builder.bindBuilder)(Specular_Ref["new"](Specular_Dom_Builder.monadEffectBuilder)("32.0"))(function (v1) {
          return Control_Bind.discard(Control_Bind.discardUnit)(Specular_Dom_Builder.bindBuilder)(Specular_Dom_Element.el_("div")(Specular_Dom_Element.el_("strong")(Specular_Dom_Element.text("Temperature Converter"))))(function () {
              return Control_Bind.discard(Control_Bind.discardUnit)(Specular_Dom_Builder.bindBuilder)(Specular_Dom_Element.el_("div")(Control_Bind.discard(Control_Bind.discardUnit)(Specular_Dom_Builder.bindBuilder)(Specular_Dom_Element.el("input")([ Specular_Dom_Element.attr("type")("text"), Specular_Dom_Element.bindValueOnChange(v) ])(Specular_Dom_Widget.emptyWidget))(function () {
                  return Specular_Dom_Element.el_("span")(Specular_Dom_Element.text(" Celsius"));
              })))(function () {
                  return Specular_Dom_Element.el_("div")(Control_Bind.discard(Control_Bind.discardUnit)(Specular_Dom_Builder.bindBuilder)(Specular_Dom_Element.el("input")([ Specular_Dom_Element.attr("type")("text"), Specular_Dom_Element.bindValueOnChange(v1) ])(Specular_Dom_Widget.emptyWidget))(function () {
                      return Specular_Dom_Element.el_("span")(Specular_Dom_Element.text(" Fahrenheit"));
                  }));
              });
          });
      });
  }));
  var fahrenheitToCelsius = function (v) {
      return Celsius((v - 32.0) * (5.0 / 9.0));
  };
  var celsiusToFahrenheit = function (v) {
      return Fahrenheit(v * (9.0 / 5.0) + 32.0);
  };
  exports["Fahrenheit"] = Fahrenheit;
  exports["Celsius"] = Celsius;
  exports["celsiusToFahrenheit"] = celsiusToFahrenheit;
  exports["fahrenheitToCelsius"] = fahrenheitToCelsius;
  exports["main"] = main;
  exports["showFahrenheit"] = showFahrenheit;
  exports["showCelsius"] = showCelsius;
})(PS);
PS["Main"].main();